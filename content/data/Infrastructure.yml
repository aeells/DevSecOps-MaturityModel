---
Configuration:

  Encrypted communications:
    risk: A cryptographic protocol is designed to provide communications security over a network.
    measure: All communication between components in the system estate should be via TLS.
    difficultyOfImplementation:
      knowledge: 1
      time: 3
      resources: 1
    usefulness: 4
    level: 1
    implementation: TLS
    samm2: o-environment-management|A|1

  External secrets management store:
    risk: Secrets are embedded in code or left unsecured on disk. Also implies no consistent way to manage, expire etc.
    measure: Secrets are secure, encrypted and managed (expiry policies etc).
    difficultyOfImplementation:
      knowledge: 4
      time: 3
      resources: 1
    usefulness: 3
    level: 2
    implementation: HashiCorp Vault, CyberArk
    dependsOn:
      - Infrastructure as Code
    samm2: o-environment-management|A|1

  Key management solution:
    risk: Key management refers to management of cryptographic keys in a cryptosystem. Compliance involves the oversight, assurance and capability of being able to demonstrate
      that keys are securely managed.
    measure: The generation, exchange, storage, use, destruction and replacement of keys.
    difficultyOfImplementation:
      knowledge: 4
      time: 3
      resources: 2
    usefulness: 4
    level: 3
    implementation: HashiCorp Vault, AWS KMS
    dependsOn:
      - Infrastructure as Code
    samm2: o-environment-management|A|1

  Certificate management solution:
    risk: Centralizing PKI management is the only effective way to ensure the security of a given system.
    measure: The process of managing digital security certificates. This includes processes such as creation, storage, dissemination, suspension and revocation of certificates.
    difficultyOfImplementation:
      knowledge: 4
      time: 3
      resources: 2
    usefulness: 4
    level: 3
    implementation: Netflix Lemur, AWS ACM
    dependsOn:
      - Infrastructure as Code
    samm2: o-environment-management|A|1

Hardening:

  Role-based access controls:
    risk: Attackers gaining access to interal systems and application interfaces. Authenticated users able to modify unauthorised information such as deployment configuration.
    measure: All internal systems are using centralised authentication and role-based access.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 3
    usefulness: 5
    level: 1
    dependsOn:
      - Defined deployment process
    implementation: HTTP-Basic Authentication, TLS, VPN, AD
    samm: EH1-B
    samm2: o-environment-management|A|1

  Segregated networks for virtual environments:
    risk: Virtual environments in default settings are able to access other virtual
      environments on the network stack. By using virtual machines, it is often possible
      to connect to other virtual machines. Using docker for example, one bridge is used by
      default so that all containers on one host can communicate with each other.
    measure: The communication between virtual environments is regulated.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 3
    usefulness: 5
    level: 1
    implementation:
      - istio
      - bridges
      - firewalls
    samm2: o-environment-management|A|1

  Usage of test and production environments:
    risk: Security tests are not running regulary because test environments are missing.
    measure: A production and a production like environments are used for security testing and are always available.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 5
    usefulness: 4
    level: 1
    dependsOn:
      - Defined deployment process
    samm2: o-environment-management|A|1

  Hardening approach:
    risk: Using default configurations for many systems eg. JBoss out of the box or a clustered Kube enviroment leads to potential risks.
    measure: Harden systems (OS level and application services) according to best practices.
    difficultyOfImplementation:
      knowledge: 4
      time: 3
      resources: 2
    usefulness: 4
    level: 2
    implementation: For example for containers deny running as root, deny using advanced privileges, deny mounting the entire filesystem etc.
      - <a href="https://www.cisecurity.org/cis-benchmarks/">CIS Kubernetes Bench for Security</a>
      - <a href="https://www.cisecurity.org/cis-benchmarks/">CIS Docker Bench for Security</a>
      For JBoss hardening reference see
      - <a href="https://docs.jboss.org/author/display/AS72/Hardening+Guidelines">JBoss Hardening</a>
    dependsOn:
      - Defined build process
    samm2: o-environment-management|A|1

  Run applications in separate virtualized environments:
    risk: Through a vulnerability in one service on a server, the attacker gains access to other services.
    measure: Run applications in separate virtualized environments.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 5
    usefulness: 3
    level: 2
    samm2: o-environment-management|A|1

  3rd party library provenance:
    risk: Application and system libraries can have implementation flaws or deployment flaws.
    measure: Each library is checked to have a trusted source.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 1
    usefulness: 3
    level: 2
    samm: SA1-A
    samm2: o-environment-management|A|1

  All production system changes versioned:
    risk: Changes to production systems can not be reverted in the event of errors or failure.
    measure: Versioning of artifacts related to all aspects of the production system and environment. For example Jenkins configuration, docker images, system provisioning code etc.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 3
    usefulness: 5
    level: 3
    dependsOn:
      - Defined deployment process
    samm2: o-environment-management|A|1

  Infrastructure as Code:
    risk: No tracking of changes in systems lead to errors in the configuration and to unauthorized changes.
    measure: Systems are codified and automatically provisioned. This is known as Infrastructure as Code or IaC. The code should be stored in a version control system.
    difficultyOfImplementation:
      knowledge: 3
      time: 5
      resources: 4
    usefulness: 4
    level: 3
    implementation: GitOps, Ansible, Chef, Puppet, Jenkinsfile
    samm2: o-environment-management|A|1

  Immutable Infrastructure:
    risk: Traditionally, security teams have been accustomed to investigating incidents and falling back to previous code releases if they detect serious issues.
    measure: For IT Ops teams, the chief advantage of immutable infrastructure is that it enables clean, predictable updates. With immutable infrastructure, you can also test the
      updated version of your resource before it goes live, which provides a high level of confidence that nothing will go awry.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 3
    level: 3
    dependsOn:
      - Infrastructure as Code
    implementation: Remove direct SSH access to infrastructure
      - <a href='https://www.infosecurity-magazine.com/opinions/mmutable-infrastructure-modern/'>How Immutable Infrastructure Changes the Modern Security Mindset</a>
    samm2: o-environment-management|A|1

  Two Factor Authentication on public-facing systems:
    risk: One factor authentication is relatively simple to bruteforce.
    measure: Two factor authentication for all privileged accounts on public-facing systems and applications.
    difficultyOfImplementation:
      knowledge: 3
      time: 2
      resources: 3
    usefulness: 4
    level: 3
    implementation: Smartcard, YubiKey, SMS
    samm2: TODO

  Limit system calls in virtual environments:
    risk: System calls in virtual environments can lead to privilege escalation.
    measure: System calls in virtual environments are limited and subject to audit.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 3
    usefulness: 5
    level: 4
    dependsOn:
      - Applications are running in virtualized environments
    implementation: seccomp, strace
    samm2: o-environment-management|A|1

  Microservices architecture:
    risk: Monolithic applications are hard to test.
    measure: A microservices architecture helps to have small components, which are easier to test.
    difficultyOfImplementation:
      knowledge: 4
      time: 5
      resources: 5
    usefulness: 3
    level: 4
    samm: SA2
    samm2: o-environment-management|A|1

  Dev-Prod parity:
    risk: When errors occur in production, developers need to be able to recreate these in a local production-like development environment in order to test and fix with assurance.
    measure: Usage of infrastructure as code helps to create a production-like environment.
      In addition, it should be possible to create production-like test data. Personal information should be anonymised to comply with data protection laws.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 3
    usefulness: 4
    level: 4
    dependsOn:
      - Defined deployment process
      - Infrastructure as Code
    samm: SA1
    samm2: o-environment-management|A|1

  Chaos Engineering:
    risk: When immutable infrastructure is not enforced and tested regularly the paradigm shift collapses. Reversion to manually provisioned infrastructure and systems occurs.
    measure: A random, periodic termination of systems ensures failover and incentivizes engineers to build resilient services in the case of Chaos Monkey, for instance.
    difficultyOfImplementation:
      knowledge: 3
      time: 5
      resources: 5
    usefulness: 3
    level: 4
    implementation:
      - <a href="https://en.wikipedia.org/wiki/Chaos_engineering">Chaos engineering</a>
      - <a href="https://medium.com/netflix-techblog/the-netflix-simian-army-16e57fbab116">The Netflix Simian Army</a>
    samm2: o-environment-management|A|1
...
---
Build:

  Security coding guidelines:
    risk: Java comes with its own unique set of security challenges. While the Java security architecture can in many cases help to protect users and systems from hostile or
      misbehaving code, it cannot defend against implementation bugs that occur in trusted code. Such bugs can inadvertently open the very holes that the security architecture
      was designed to contain. In severe cases local programs may be executed or Java security disabled. These bugs can potentially be used to steal confidential data from the
      machine and intranet, misuse system resources, prevent useful operation of the machine, assist further attacks, and many other malicious activities.
    measure: To minimize the likelihood of security vulnerabilities caused by programmer error, Java developers should adhere to recommended coding guidelines.
    difficultyOfImplementation:
      knowledge: 2
      time: 3
      resources: 2
    usefulness: 4
    level: 1
    implementation:
      - <a href='https://www.oracle.com/technetwork/java/seccodeguide-139067.html'>Secure Coding Guidelines for Java SE</a>
    samm2: i-secure-build|A|1

  Repeatable build process:
    risk: Performing builds without a defined process is error prone.
      For example, as a result of incorect security related configuration.
    measure: A source-controlled build process lowers the possibility of errors during the build
      process. No master commits, branch Pull Requests with Approvers. 3rd party dependencies versioned, full provenance, licence management etc.
    difficultyOfImplementation:
      knowledge: 2
      time: 3
      resources: 2
    usefulness: 4
    level: 1
    implementation: "Git"
    samm2: i-secure-build|A|1

  Automated security acceptance tests:
    risk: After code review and merge of Pull Request branches to the master branch, any delay in receiving feedback on defects makes them harder for the developer to remediate.
    measure: On each merge and/or at given intervals automatic security acceptance tests are performed.
    difficultyOfImplementation:
      knowledge: 1
      time: 1
      resources: 1
    usefulness: 2
    level: 2
    implementation: ""
    samm2: i-secure-build|A|3

  Digitally signed commits:
    risk: Unauthorized manipulation of source code might be difficult to spot.
    measure: Digitally signing commits helps to prevent unauthorized manipulation of source code.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 3
    level: 3
    implementation:
    dependsOn:
      - Defined build process
    samm: OA3-B
    samm2: i-secure-build|A|2

  Digitally signed artefacts:
    risk: Unauthorized manipulation of artefacts might be difficult to spot. For example, this may result in
      images with malicious code in the Docker registry.
    measure: Digitally signing artefacts for all steps during the build process helps to ensure their integrity.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 4
    level: 3
    implementation:
      - <a href="https://docs.docker.com/notary/getting_started/">Docker Content Trust</a>
      - <a href="https://in-toto.github.io/">in-toto</a>
    dependsOn:
      - Defined build process
    samm: OA3-B
    samm2: i-secure-build|A|1

  Build and test of artefacts in virtual environments:
    risk: While building and testing applications, 3rd party systems, application frameworks
      and 3rd party libraries are used. These might be malicious as a result of vulnerable
      libraries or because they are altered during the delivery phase.
    measure: Each step during the build and test phase is performed in a separate virtual environment, which is destroyed afterward.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 2
    level: 4
    implementation: Docker
    samm2: i-secure-build|A|2

Deployment:

  Defined deployment process:
    risk: Deployments without a defined process are error prone thus allowing old, untested or artefacts without provenance to be deployed.
    measure: A defined deployment process significantly lowers the risk of security errors during the deployment phase.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 1
    implementation: Jenkins, Docker
    samm2: i-secure-deployment|A|1

  Inventory of running artifacts:
    risk: In case a high severity or critical vulnerability exists, it needs to be known where an artifacts with that vulnerability are deployed with which dependencies.
    Measure: A documented inventory or a possibility to gather the requierd information (e.g. the documentation of which script needs to be run by whom) must be in place.
    implementation: Kubernetes Admission Controller can whitelist registries and/or whitelist a signing key.
    dependsOn:
      - Defined deployment process
    difficultyOfImplementation:
      knowledge: 1
      time: 1
      resources: 1
    usefulness: 3
    level: 1
    samm2: o-incident-management|TODO

  Backup before deployment:
    risk: If errors are experienced during the deployment process you want to deploy
      an old release. However, due to changes in the database this is often unfeasible.
    measure: Performing automated backups before deployment can help facilitate deployments whilst testing the backup restore processes.
    difficultyOfImplementation:
      knowledge: 1
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    implementation: A complete database dabackup might be performed. For large and complex
      environments, a Point in Time Recovery for databases should be implemented.
    dependsOn:
      - Defined deployment process
    samm: OE2-A
    samm2: TODO

  Rollback deployment:
    risk: Similarly, if errors are experienced during the deployment process you might want to deploy
      the previous release.
    measure: Performing and testing (dry-runs) automated rollbacks before deployment can help facilitate deployments.
    difficultyOfImplementation:
      knowledge: 1
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    implementation: A database release strategy should be implemented.
    dependsOn:
      - Defined deployment process
    samm: OE2-A
    samm2: TODO

  Configuration externalised from environments:
    risk: Attackers who compromise source code can see confidential access information like database credentials.
    measure: Configuration parameters for each environment reside in source control repository separate from the application codebase.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    implementation: ""
    samm: SA2-A
    samm2: i-secure-deployment|B|1

  Use of trusted images:
    risk: Untrusted images in the production cluster may have malicous code or known vulnerabilities.
    Measure: Whitelist signed artificats/images or whitelist a trusted (internal) registry.
    implementation: Kubernetes Admission Controller can whitelist registries and/or whitelist a signing key.
    dependsOn: Signing of artefacts
    difficultyOfImplementation:
      knowledge: 1
      time: 1
      resources: 1
    usefulness: 3
    level: 2
    samm2: i-secure-deployment|A|2

  Rolling update on deployment:
    risk: While a deployment is performed, the application can not be reached.
    measure: A deployment without downtime is performed*.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 2
    level: 3
    implementation: Docker, Webserver, rolling update
    dependsOn:
      - Defined deployment process
    samm2: i-secure-deployment|A|1

  Build only once:
    risk: Building an artefact for different environments means that an untested artefact might reach the production environment.
    measure: Building an artefact once and deploying it to pipelined environments means that only tested artefacts are allowed to reach the production.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 3
    implementation: Docker
    dependsOn:
      - Defined build process
    samm: OE2-A
    samm2: i-secure-deployment|A|2

  Usage of feature toggles:
    risk: By using environment dependent configuration, some parameters will not be tested correctly. i.e. <pre>if (host == 'production') {} else {}</pre>
    measure: Usage of environment independent configration parameters, called feature toggles, helps to enhance the test coverage. Only what has been tested, goes to production.
    difficultyOfImplementation:
      knowledge: 2
      time: 1
      resources: 1
    usefulness: 2
    level: 3
    implementation: Docker
    dependsOn:
      - Build only once
    samm: EG1-B
    samm2: TODO

  Blue/Green Deployments:
    risk: A new artefact version can have unknown defects.
    measure: By having multiple production environments, a deployment can be performed on the first environment to spot possible defects before it is deployed to the sibling production cluster.
    difficultyOfImplementation:
      knowledge: 1
      time: 2
      resources: 1
    usefulness: 2
    level: 4
    implementation: <a href='https://martinfowler.com/bliki/BlueGreenDeployment.html'>Blue/Green Deployments</a>
    dependsOn:
      - Smoke Test
    samm2: TODO
...

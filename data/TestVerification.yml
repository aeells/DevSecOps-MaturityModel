---
Static application analysis:

#  Test of middleware components with known vulnerabilities:
#    risk: Components of the middleware might have vulnerabilities.
#    measure: Tests for known vulnerabilities in components of the middleware are performed.
#    difficultyOfImplementation:
#      knowledge: 1
#      time: 2
#      resources: 1
#    usefulness: 5
#    level: 1
#    dependsOn:
#      - Defined build process
#    implementation: OWASP Dependency Check
#    samm: SA
#    samm2: v-security-testing|A|2

  Server-side SCA:
    risk: Source code contains bugs and security vulnerabilities.
    measure: Implementation of static code analysis tools embedded in the SDLC.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    implementation: eslint, FindSecurityBugs, jsprime
    dependsOn:
      - Defined build process
    samm2: v-security-testing|A|2

  Client-side SCA:
    risk: Source code contains bugs and security vulnerabilities.
    measure: Implementation of static code analysis tools embedded in the SDLC.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    implementation:
      - eslint
      - FindSecurityBugs
      - jsprime
      - <a href='https://github.com/ing-bank/bdd-mobile-security-automation-framework'>bdd-mobile-security-automation-framework</a>
    samm2: v-security-testing|A|2
    dependsOn:
      - Defined build process

  Client-side components with known vulnerabilities SCA:
    risk: Source code contains bugs and security vulnerabilities.
    measure: Tests for known vulnerabilities in components of the frontend are performed.
    difficultyOfImplementation:
      knowledge: 1
      time: 2
      resources: 1
    usefulness: 2
    level: 3
    dependsOn:
      - Defined build process
    implementation:
      - <a href="https://github.com/RetireJS/retire.js/">retire.js</a>
      - <a href="https://docs.npmjs.com/cli/audit">npm audit</a>
    samm2: v-security-testing|A|2

  Usage of multiple SCA scanners:
    risk: Each vulnerability scanner has different opportunities. By using just one scanner some vulnerabilities might not be found.
    measure: Usage of multiple static code analysis tools to find more vulnerabilities.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 5
    usefulness: 1
    level: 3
    dependsOn:
      - Usage of different roles
    samm2: v-security-testing|A|2

  Reduction in duplication of source code:
    risk: Duplicates in source code might influence the stability of the application.
    measure: Automatic Detection and manual removal of duplicates in source code.
    difficultyOfImplementation:
      knowledge: 1
      time: 1
      resources: 1
    usefulness: 1
    level: 4
    dependsOn:
      - Defined build process
    implementation:
      - <a href="https://pmd.github.io/latest/pmd_userdocs_cpd.html#why-should-you-care-about-duplicates">Why should you care about duplicates?</a>
    samm2: v-security-testing|A|2

  3rd party library SCA:
    risk: 3rd party dependency library usage is significant and there are likely to be vulnerabilities present, particularly if these libraries are not kept up to date with the
      latest version.
    measure: Implementation of binary static code analysis tools embedded in the SDLC.
    difficultyOfImplementation:
      knowledge: 2
      time: 4
      resources: 2
    usefulness: 3
    level: 4
    dependsOn:
      - "Static analysis of server-side components"
      - "Static analysis of client-side components"
    implementation: OWASP Dependency Check
    samm2: v-security-testing|A|2

  Coding style SCA:
    risk: Inconsistent coding styles lead to unreadable code. This in turn makes it harder to refactor and this in turn increases the likelihood of bugs significantly over time.
    measure: Analysis of compliance to coding style guides.
    difficultyOfImplementation:
      knowledge: 1
      time: 1
      resources: 1
    usefulness: 1
    level: 4
    implementation: PMD, Checkstyle
    samm2: v-security-testing|A|2

Dynamic application analysis:

  Simple Scan:
    risk: Deficient security tests are performed. Simple vulnerabilities are not detected
      and missing security configurations (e.g. headers) are not set. Fast feedback
      is not given.
    measure: A simple scan is performed to get a security baseline. In case the test
      is done in under 10 minutes, it should be part of the build and deployment process.
    difficultyOfImplementation:
      knowledge: 2
      time: 3
      resources: 1
    usefulness: 2
    level: 1
    dependsOn:
      - Defined build process
    samm: ST2
    implementation:
      - OWASP Zap
      - Arachni
    samm2: v-security-testing|A|1

  Usage of different roles:
    risk: Parts of the service are not covered during the scan, because a login is
      not performed.
    measure: Integration of authentication with all roles used in the service.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 1
    usefulness: 2
    level: 2
    dependsOn:
      - Simple Scan
    samm2: v-security-testing|A|2

  Coverage of client-side dynamic components:
    risk: Parts of the service are not covered during the scan, because JavaScript
      is not getting executed. Therefore, the co
    measure: Usage of a spider which executes dynamic content like JavaScript, e.g.
      via Selenium.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 1
    usefulness: 4
    level: 2
    dependsOn:
    - Usage of different roles
    samm: ST-2
    samm2: v-security-testing|A|2
    implementation: Ajax Spider

  Usage of multiple scanners:
    risk: Each vulnerability scanner has different opportunities. By using just one
      scanner, some vulnerabilities might not be found.
    measure: Usage of multiple spiders and scanner enhance the coverage and the vulnerabilities.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 5
    usefulness: 1
    level: 3
    dependsOn:
      - Usage of different roles
    implementation: SecureCodeBox
    samm2: v-security-testing|A|2

  Coverage of hidden endpoints:
    risk: Hidden endpoints of the service are not getting tracked.
    measure: Hidden endpoints are getting detected and included in the vulnerability
      scan.
    difficultyOfImplementation:
      knowledge: 3
      time: 2
      resources: 1
    usefulness: 5
    level: 3
    implementation: cURL, OpenAPI
    dependsOn:
    - Usage of different roles
    samm2: v-security-testing|A|2

  Coverage of more input vectors:
    risk: Parts of the service are not covered. For example specially formatted or
      coded parameters are not getting detected as parameter (e.g. parameters in REST-like
      URLs, parameters in JSON-Format or base64-coded parameters).
    measure: Special parameter and special encodings are defined, so that they get
      fuzzed by the used vulnerability scanners.
    difficultyOfImplementation:
      knowledge: 5
      time: 5
      resources: 1
    usefulness: 4
    level: 3
    dependsOn:
    - Usage of different roles
    samm2: v-security-testing|A|2

  Coverage of sequential operations:
    risk: Sequential operations like workflows (e.g. login -> put products in the
      basked
    measure: Sequential operations are defined and checked by the vulnerability scanner
      in the defined order.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 1
    usefulness: 5
    level: 3
    implementation: cURL
    dependsOn:
    - Usage of different roles
    samm2: v-security-testing|A|2

  Coverage of service to service communication:
    risk: Service to service communication is not covered.
    measure: Service to service communication is dumped and checked.
    difficultyOfImplementation:
      knowledge: 4
      time: 5
      resources: 2
    usefulness: 3
    level: 4
    dependsOn:
    - Simple Scan
    samm2: v-security-testing|A|2

  Coverage analysis:
    risk: Parts of the service are not still covered.
    measure: Check that there are no missing paths in the application with coverage-tools.
    difficultyOfImplementation:
      knowledge: 4
      time: 5
      resources: 3
    usefulness: 4
    level: 4
    implementation: OWASP Code Pulse
    samm2: v-security-testing|A|2

Static infrastructure analysis:

  Test cluster deployment resources:
    risk: The deployment configuration (e.g. kubernetes deployment resources) might contain unsecure configurations.
    measure: Test the deployment configuration for virtualized environments for unsecure configurations.
    difficultyOfImplementation:
      knowledge: 2
      time: 1
      resources: 2
    usefulness: 3
    level: 2
    implementation:
      - <a href="https://kubesec.io/">kubesec</a>
    samm2: v-security-testing|A|1

  Test the configuration of cloud environments:
    risk: Standard hardening practices for cloud environments are not performed leading
      to vulnerabilities.
    measure: With the help of tools the configuration of virtual environments are
      tested.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    implementation:
      - <a href="https://github.com/aquasecurity/kube-bench">kube-bench</a>
    samm: EH2-B
    samm2: v-security-testing|A|1

  Test of infrastructure components for known vulnerabilities:
    risk: " Infrastructure components might have vulnerabilities."
    measure: "Test for known vulnerabilities in infrastructure components. Often, the only way to respond to known vulnerabilities in operating system packages is to accept the risk and wait for a patch."
    difficultyOfImplementation:
      knowledge: 2
      time: 5
      resources: 2
    usefulness: 2
    level: 3
    implementation:
      - Anchore
      - Clair
      - OpenSCAP
      - <a href='https://github.com/future-architect/vuls'>Vuls</a>
    samm2: v-security-testing|A|1

Dynamic infrastructure analysis:

  Test network segmentation:
    risk: Wrong or no network segmentation of pods makes it easyer for an attacker to access a database and extract or modify data.
    measure: Integration of fine granulated network segmenation (also between pods in the same namespace)
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 3
    level: 1
    implementation: <a href="https://github.com/controlplaneio/netassert">netassert</a>
    dependendsOn: Segmentated networks for virtual environments
    samm2: v-security-testing|A|2

  Test of the configuration of cloud environments:
    risk: Standard hardening practices for cloud environments are not performed leading to vulnerabilities.
    measure: With the help of tools the configuration of virtual environments are tested.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    implementation:
      - <a href='https://github.com/aquasecurity/kube-hunter'>kube-hunter</a>
      - openVAS
    samm: EH2-B

  Weak password test:
    risk: Weak passwords in components like applications or systems, specially for
      privileged accounts, lead to take over of that account.
    measure: Automatic brute force attacks are performed. Specially the usage of standard
      accounts like 'admin' and employee user-ids is recommended.
    difficultyOfImplementation:
      knowledge: 2
      time: 1
      resources: 1
    usefulness: 1
    level: 3
    implementation: HTC Hydra
    samm2: v-security-testing|A|2

  Load tests:
    risk: As it is unknown how many requests the systems and applications can serve,
      due to an unexpected load the availability is disturbed.
    measure: Load test against the production system or a production near system is
      performed.
    difficultyOfImplementation:
      knowledge: 3
      time: 2
      resources: 5
    usefulness: 3
    level: 4
    samm2: v-security-testing|A|1

Test Intensity:

  Default settings for intensity:
    risk: Time pressure and ignorance might lead to false predictions for the test
      intensity.
    measure: The intensitiy of the used tools are not modified to safe time.
    difficultyOfImplementation:
      knowledge: 1
      time: 1
      resources: 1
    usefulness: 1
    level: 1
    samm2: v-security-testing|A|1

  Deactivating of unneeded tests:
    risk: As tools cover a wide range of different vulnerability tests, they might
      not match the used compoents. Therefore, they need more time and resources as
      they need and the feedback loops takes too much time.
    measure: Unneeded tests are deactivated. For example in case the service is using
      a mongo database and no mysql database, the dynamic scan doesn't need to test
      for sql injections.
    difficultyOfImplementation:
      knowledge: 2
      time: 3
      resources: 1
    usefulness: 1
    level: 2
    samm2: v-security-testing|A|2

  Creation and application of a testing concept:
    risk: Scans might use a too small or too high test intensity.
    measure: A testing concept considering the amount of time per scan/intensity is
      created and applied. A dynamic analysis needs more time than a static analysis.
      The dynamic scan, depending on the test intensity might be performed on every
      commit, every night, every week or once in a month.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 3
    usefulness: 2
    level: 3
    samm2: v-security-testing|A|2

  High test intensity:
    risk: A too small intensity or a too high confidence might lead to not visible
      vulnerabilities.
    measure: A deep scan with high test intensity and a low confidence threshold is
      performed.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 5
    usefulness: 3
    level: 4
    samm2: v-security-testing|A|2

Consolidation:

  Definition of quality gates:
    risk: Improper examination of vulnerabilities leads to no visibility at all.
    measure: Quality gates for found vulnerabilities are defined. In the start it
      is important to not overload the security analyst, therefore the recommendation
      is to start with alerting of high cirital vulnerabilities.
    difficultyOfImplementation:
      knowledge: 1
      time: 1
      resources: 1
    usefulness: 4
    level: 1
    samm: IR2-A
    samm2: i-defect-management|A|2

  Simple false positive treatment:
    risk: As false positive occure during each test, all vulnerabilities might be
      ignored.
    measure: False positives are suppressed so they will not show up on the next tests
      again.
    difficultyOfImplementation:
      knowledge: 1
      time: 1
      resources: 1
    usefulness: 4
    level: 1
    implementation: Most security tools have the possibility to suppress false positives.
    samm: IR2-A
    samm2: i-defect-management|A|2

  Simple visualization of defects:
    risk: The security level of a component is not visible. Therefore, the motivation
      to enhance the security is not give.
    measure: Vulnerabilties are simple visualized.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 3
    level: 2
    implementation:
      - OWASP Dependency Check Jenkins Plugin
      - LogParser Jenkins Plugins
      - SecureCodeBox
    samm2: i-defect-management|B|1

  Integration of vulnerability issues into the development process:
    risk: To read console output of the build server to search for vulnerabilities
      might be difficult. Also, to check a vulnerability management system might not
      be a daily task for a developer.
    measure: Vulnerabilities are tracked in the teams issue system (e.g. jira).
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 2
    level: 3
    implementation: "Bei SAST: Serverseitige/klientenseitige Teams k\xF6nnen einfach
      erfasst werden. Bei Mikroservice-Architektur k\xF6nnen einzelne Mikroservices
      i.d.R. Teams zugewiesen werden. Bei DAST: Schwachstellen sind klassifiziert
      und k\xF6nnen serverseitigen und klientenseitigen Teams zugewiesen werden."
    samm2: "i-defect-management|B|2"

  Treatment of defects with severity middle:
    risk: Vulnerabilities with severity middle are not visible.
    measure: Vulnerabilities with severity middle are added to the quality gate.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 3
    level: 3
    comment: False positive analysis, specially for static analysis, is time consuming.
    samm2: i-defect-management|B|2

  Reproducible defect tickets:
    risk: Vulnerability descriptions are hard to understand by staff from operations
      and development.
    measure: Vulnerabilities include the test procedure to give the staff from operations
      and development the ability to reproduce vulnerabilities. This enhances the
      understanding of vulnerabilities and therefore the fix have a higher quality.
    difficultyOfImplementation:
      knowledge: 3
      time: 2
      resources: 2
    usefulness: 2
    level: 4
    implementation: <a href='https://github.com/mozilla/zest'>Mozilla Zest</a>
    samm2: i-defect-management|B|2

  Treatment of all defects:
    risk: Vulnerabilities with serverity low are not visible.
    measure: All vulnerabilities are added to the quality gate.
    difficultyOfImplementation:
      knowledge: 3
      time: 2
      resources: 1
    usefulness: 2
    level: 4
  samm2: i-defect-management|B|2

  Advanced visualization of defects:
    risk: Correlation of the vulnerabilities of different tools to have an overview
      of the the overall security level per component/project/team is not given.
    measure: Findings are visualized per component/project/team.
    difficultyOfImplementation:
      knowledge: 2
      time: 4
      resources: 1
    usefulness: 2
    level: 4
    implementation:
      - OWASP Defect Dojo
      - SecureCodeBox
    samm2: i-defect-management|B|1

  Usage of a vulnerability management system:
    risk: Maintenance of false positives in each tool enforces a high workload. In
      addition a correlation of the same finding from different tools is not possible.
    measure: Aggregation of vulnerabilities in one tool reduce the workload to mark
      false positives.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 2
    usefulness: 2
    level: 4
    implementation:
    - OWASP Defect Dojo
    - SecureCodeBox
    samm2: i-defect-management|B|1

Application tests:

  Security unit tests for important components:
    risk: Vulnerabilities are rising due to code changes.
    measure: Usage of unit tests to test important security related features like
      authentication and authorization.
    difficultyOfImplementation:
      knowledge: 3
      time: 4
      resources: 2
    usefulness: 3
    level: 2
    comment: "Die Integration von Modultests findet schon w\xE4hrend der Entwicklung
      statt, es wird auf Schwachstellen in Sub-Routinen, Funktionen, Module, Bibliotheken
      usw. gepr\xFCft."
    implementation:
      - JUnit
      - <a href='https://karma-runner.github.io'>Karma</a>
    samm: ST2-B
    samm2: v-security-testing|B|3

  Security integration tests for important components:
    risk: Vulnerabilities are rising due to code changes in a complex microservice
      environment.
    measure: Implementation of essential security related integration tests. For example
      for authentication and authorization.
    difficultyOfImplementation:
      knowledge: 3
      time: 4
      resources: 2
    usefulness: 2
    level: 3
    implementation: HttpUnit
    samm: ST2-B
    samm2: v-security-testing|B|3

  High coverage of security related module and integration tests:
    risk: Vulnerabilities are rising due to code changes in a complex microservice
      environment in not important components.
    measure: Implementation of security related tests via unit tests and integration
      tests. Including the test of libraries, in case the are not tested already.
    difficultyOfImplementation:
      knowledge: 5
      time: 5
      resources: 3
    usefulness: 3
    level: 4
    samm: ST2-B
    samm2: v-security-testing|B|3

  Smoke Test:
    risk: During a deployment an error might happen which leads to non-availablity
      of the system, a part of the system or a feature.
    measure: Integration tests are performed against the production environment after
      each deployment.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 2
    level: 4
    implementation: ""
    dependsOn:
    - Defined deployment process
    samm: ST2-B
    samm2: v-security-testing|B|3

...
